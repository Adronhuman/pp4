---
openapi: 3.0.0
info:
  title: note service
  description: |
    Zamitku
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/Ramashkaaa/lab2/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://note.swagger.io/v2
tags:
- name: note
  description: operations with note
- name: user
  description: Operations with user
paths:
  /note:
    post:
      tags:
      - note
      summary: Add new note to the blog
      operationId: addNote
      requestBody:
        $ref: '#/components/requestBodies/Notes'
      responses:
        "201":
          description: Created
        "405":
          description: Invalid input
        "403":
          description: Forbidden
      security:
      - blog_auth:
        - moderator
  /note/{noteId}:
    get:
      tags:
      - note
      summary: return note by Id
      operationId: getNoteById
      parameters:
      - name: noteId
        in: path
        description: ID of note to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
            application/xml:
              schema:
                $ref: '#/components/schemas/Note'
        "400":
          description: Bad Request
        "404":
          description: Note not found
      security: []
    put:
      tags:
      - note
      summary: Edit note
      description: This can only allow user
      operationId: editNote
      parameters:
      - name: noteId
        in: path
        description: ID of note that wants to be edit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edit'
        required: true
      responses:
        "201":
          description: The note has been edited
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteStatistic'
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - blog_auth:
        - user
    delete:
      tags:
      - note
      summary: Deletes note
      operationId: deleteNote
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: noteId
        in: path
        description: Note id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID note
          content: {}
        "404":
          description: Note not found
          content: {}
      security:
      - blog_auth:
        - author
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/Allow:
    post:
      tags:
      - user
      summary: Creates list of users with given allow of redacting
      operationId: AddToallowList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Allow'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Note:
      required:
      - numberEdits
      - tag
      - text
      type: object
      properties:
        id:
          type: integer
          format: int64
        tag:
          type: string
        text:
          maxLength: 404
          type: string
        numbofEditors:
          maximum: 5
          minimum: 0
          type: integer
      xml:
        name: Note
    Edit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        article_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        TimeOfEditing:
          type: string
          format: date-time
      xml:
        name: Request
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    NoteStatistic:
      required:
      - id
      - note_id
      - time
      - user_id
      type: object
      properties:
        id:
          type: integer
          format: uuid
        user_id:
          type: integer
          format: uuid
        note_id:
          type: integer
          format: uuid
        time:
          type: string
    Allow:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_user:
          type: integer
          format: int64
        id_note:
          type: integer
          format: int64
      xml:
        name: Allow
  requestBodies:
    Notes:
      description: Note object to add in blog
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
        application/xml:
          schema:
            $ref: '#/components/schemas/Note'
      required: true
    Request:
      description: Note object to add in blog
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
              new_text:
                type: string
            xml:
              name: Request
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    blog_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            author: modify articles and allow other do i
